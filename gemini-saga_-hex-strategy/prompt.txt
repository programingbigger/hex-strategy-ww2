素晴らしい！
では次にこれを実行して

# Role: Expert Software Analyst & Technical Writer

あなたは、既存のソースコードを解析し、高品質なドキュメントを作成する専門家です。あなたの任務は、提供された一連のソースコードから、**「仕様書 (GDD)」**と**「機能定義書 (Technical Specification)」**の2つのドキュメントを作成し、それぞれ指定されたファイル名のマークダウンファイルとして出力することです。

---

## **Instructions**

以下の手順に従って、タスクを遂行してください。

### **Step 1: Overall Code Analysis (全体解析)**
1.  提供されたすべてのソースコードファイルを読み込み、アプリケーションの全体像（目的、主要な機能、使用技術スタック）を把握します。
2.  ファイル間の依存関係や、主要なロジックの流れを頭の中で整理してください。

### **Step 2: Generate Specification (GDD) (仕様書の作成)**
このステップでは、**「プレイヤー」または「企画者」の視点**に立ち、コードの技術的な詳細から離れて、ゲームやアプリケーションの「体験」を記述します。

1.  **ゲーム概要**: コードから推測されるゲームのタイトル、テーマ、勝利条件などを記述します。
2.  **ユニット/キャラクター特性**: `Unit`や`Character`に関連するクラスや定数から、プレイヤーが見てわかるステータス（HP、攻撃力など）や能力を抜き出し、表形式でまとめます。
3.  **地形/アイテム特性**: マップやアイテムに関連するデータから、それらがゲームプレイに与える影響（効果、コストなど）を表形式でまとめます。
4.  **基本ルールと流れ**: ゲームの進行（ターン制、リアルタイムなど）、プレイヤーが実行可能な主なアクション（移動、攻撃、待機など）を記述します。
5.  **UI概要**: UI関連のコンポーネントファイルから、プレイヤーが目にする主要な画面要素（ヘッダー、情報パネル、モーダルウィンドウなど）の役割を説明します。

**【重要】** このセクションでは、関数名や変数名を直接使うのではなく、**「プレイヤーが何を行えるか」「何が起こるか」**という観点で記述してください。

### **Step 3: Generate Functional Definition (Technical Spec) (機能定義書の作成)**
このステップでは、**「開発者」の視点**に立ち、仕様書で定義された内容が「どのように実装されているか」を技術的に記述します。

1.  **基本構造と状態管理**: アプリケーションの心臓部となるファイル（例: `App.tsx`, `GameManager.cs`）を特定し、管理されている主要な状態（`State`）とその型、役割を表形式でまとめます。
2.  **主要な関数/メソッド**: 主要な状態を更新するロジック（例: `handleAttack`, `endTurn`）をリストアップし、それぞれの役割を簡潔に説明します。
3.  **定数と型定義**: ゲームの根幹をなす不変のデータ（`constants.ts`など）や、アプリケーション全体で使われるデータ構造（`types.ts`など）の役割を説明します。
4.  **コアロジック**:
    - **マップ関連処理**: マップ生成、移動範囲計算など、アルゴリズムが重要となる処理について、どのファイルが担当しているかとその概要を記述します。
    - **戦闘処理**: ダメージ計算などの戦闘ロジックについて、どのファイルが担当しているかとその概要を記述します。
5.  **UIコンポーネント**: 各UIコンポーネントファイルが、どのデータを受け取り、どのように描画し、どんなイベントを処理するのかを具体的に記述します。

**【重要】** このセクションでは、**具体的なファイル名、関数名、変数名、データ構造**を積極的に用いて、コードベースの事実を正確に記述してください。

### **Step 4: Final Output Formatting (最終出力)**
1.  上記で作成した内容を、以下の**2つのファイル**として、それぞれ個別のマークダウンコードブロックで出力してください。
2.  各ファイルは、指定されたファイル名で新規作成、または上書きされることを想定しています。
3.  各ドキュメント内では、`##` や `###` を使って階層構造を明確にし、表やリストを効果的に使用して、可読性の高いドキュメントを作成してください。

---
**ファイル1: `仕様書.md`**
```markdown
# 🎨 ゲーム仕様書：【推測されるゲームタイトル】

### 1. ゲーム概要
* **ゲームタイトル案**: 【推測されるゲームタイトル】
* **テーマ**: 【推測されるテーマ】
* **勝利条件**: 【推測される勝利条件】

### 2. ユニット特性
| ユニット種別 | 最大HP | 攻撃力 | ... |
| :--- | :--- | :--- | :--- |
| ... | ... | ... | ... |

### 3. 地形特性
...

### 4. 基本ルールと流れ
...

### 5. UI概要
...

ファイル2: 機能定義書.md
Markdown



# 🧑‍💻 機能定義書：【推測されるゲームタイトル】

### 1. ゲームの基本構造と状態管理 (例: `App.tsx`)
| 状態 (State) | 型 (Type) | 説明 |
| :--- | :--- | :--- |
| ... | ... | ... |

### 2. 主要な関数/メソッド
...

### 3. 定数と型定義 (例: `constants.ts`, `types.ts`)
...

### 4. コアロジック
#### 4.1. マップ関連処理 (例: `utils/map.ts`)
...

#### 4.2. 戦闘処理
...

### 5. UIコンポーネント
...

